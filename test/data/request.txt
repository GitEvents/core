{ _readableState:
   { highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: false,
     ended: true,
     endEmitted: true,
     reading: false,
     calledRead: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     objectMode: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  domain: null,
  _events: { data: [Function], readable: [Function], end: [Function] },
  _maxListeners: 10,
  socket:
   { _connecting: false,
     _handle:
      { fd: 11,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState:
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState:
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 9917,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1421586320655,
     _monotonicStartTime: 92979889,
     parser:
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage:
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular] } },
  connection:
   { _connecting: false,
     _handle:
      { fd: 11,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState:
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState:
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 9917,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1421586320655,
     _monotonicStartTime: 92979889,
     parser:
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage:
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular] } },
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: '178.62.71.57',
     accept: '*/*',
     'user-agent': 'GitHub-Hookshot/2e7ffb9',
     'x-github-event': 'issues',
     'x-github-delivery': 'a71ed180-9f12-11e4-8338-400304b2bf4a',
     'content-type': 'application/json',
     'x-hub-signature': 'sha1=def8a1f01dd4c779c0226aa9bee63155da2ad066',
     'content-length': '9614' },
  trailers: {},
  _pendings: [],
  _pendingIndex: 0,
  url: '/github/delivery',
  method: 'POST',
  statusCode: null,
  client:
   { _connecting: false,
     _handle:
      { fd: 11,
        writeQueueSize: 0,
        owner: [Circular],
        onread: [Function: onread],
        reading: true },
     _readableState:
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Object],
        timeout: [Function],
        error: [Function],
        close: [Object] },
     _maxListeners: 10,
     _writableState:
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 9917,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:3000' },
     _idleTimeout: 120000,
     _idleNext: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idlePrev: { _idleNext: [Circular], _idlePrev: [Circular] },
     _idleStart: 1421586320655,
     _monotonicStartTime: 92979889,
     parser:
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: [Circular],
        incoming: [Circular],
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage:
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: [Circular],
        connection: [Circular] } },
  _consuming: true,
  _dumped: false,
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  upgrade: false,
  pipe: [Function],
  addListener: [Function: addListener],
  on: [Function: addListener],
  pause: [Function],
  resume: [Function],
  read: [Function],
  body: '{"action":"labeled","issue":{"url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/issues/3","labels_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/issues/3/labels{/name}","comments_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/issues/3/comments","events_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/issues/3/events","html_url":"https://github.com/PatrickHeneise/gitup-testing/issues/3","id":54695469,"number":3,"title":"Your Awesome Talk","user":{"login":"PatrickHeneise","id":74390,"avatar_url":"https://avatars.githubusercontent.com/u/74390?v=3","gravatar_id":"","url":"https://api.github.com/users/PatrickHeneise","html_url":"https://github.com/PatrickHeneise","followers_url":"https://api.github.com/users/PatrickHeneise/followers","following_url":"https://api.github.com/users/PatrickHeneise/following{/other_user}","gists_url":"https://api.github.com/users/PatrickHeneise/gists{/gist_id}","starred_url":"https://api.github.com/users/PatrickHeneise/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PatrickHeneise/subscriptions","organizations_url":"https://api.github.com/users/PatrickHeneise/orgs","repos_url":"https://api.github.com/users/PatrickHeneise/repos","events_url":"https://api.github.com/users/PatrickHeneise/events{/privacy}","received_events_url":"https://api.github.com/users/PatrickHeneise/received_events","type":"User","site_admin":false},"labels":[{"url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/labels/talk+proposal","name":"talk proposal","color":"0052cc"}],"state":"open","locked":false,"assignee":null,"milestone":{"url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/milestones/1","labels_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/milestones/1/labels","id":939881,"number":1,"title":"Some NodeJS Event in the Future","description":"Where: Barcelona\\r\\nWhen: 6pm - 9pm\\r\\nAddress: Lollipop, Some Street, Somewhere in Sunny 123 Barcelona\\r\\nSome: more stuff\\r\\nAnd: even more info\\r\\nSo: whatever you want ...\\r\\n","creator":{"login":"PatrickHeneise","id":74390,"avatar_url":"https://avatars.githubusercontent.com/u/74390?v=3","gravatar_id":"","url":"https://api.github.com/users/PatrickHeneise","html_url":"https://github.com/PatrickHeneise","followers_url":"https://api.github.com/users/PatrickHeneise/followers","following_url":"https://api.github.com/users/PatrickHeneise/following{/other_user}","gists_url":"https://api.github.com/users/PatrickHeneise/gists{/gist_id}","starred_url":"https://api.github.com/users/PatrickHeneise/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PatrickHeneise/subscriptions","organizations_url":"https://api.github.com/users/PatrickHeneise/orgs","repos_url":"https://api.github.com/users/PatrickHeneise/repos","events_url":"https://api.github.com/users/PatrickHeneise/events{/privacy}","received_events_url":"https://api.github.com/users/PatrickHeneise/received_events","type":"User","site_admin":false},"open_issues":3,"closed_issues":0,"state":"open","created_at":"2015-01-17T16:15:43Z","updated_at":"2015-01-18T13:05:13Z","due_on":"2015-01-30T23:00:00Z","closed_at":null},"comments":0,"created_at":"2015-01-18T12:47:23Z","updated_at":"2015-01-18T13:05:19Z","closed_at":null,"body":"---\\r\\nlevel: beginner | advanced | expert\\r\\nlanguage: en | es\\r\\ntwitter: YourTwitterHandle\\r\\nmonth: February\\r\\n\\r\\n---\\r\\n\\r\\nYour awesome talk description"},"label":{"url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/labels/talk+proposal","name":"talk proposal","color":"0052cc"},"repository":{"id":29391416,"name":"gitup-testing","full_name":"PatrickHeneise/gitup-testing","owner":{"login":"PatrickHeneise","id":74390,"avatar_url":"https://avatars.githubusercontent.com/u/74390?v=3","gravatar_id":"","url":"https://api.github.com/users/PatrickHeneise","html_url":"https://github.com/PatrickHeneise","followers_url":"https://api.github.com/users/PatrickHeneise/followers","following_url":"https://api.github.com/users/PatrickHeneise/following{/other_user}","gists_url":"https://api.github.com/users/PatrickHeneise/gists{/gist_id}","starred_url":"https://api.github.com/users/PatrickHeneise/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PatrickHeneise/subscriptions","organizations_url":"https://api.github.com/users/PatrickHeneise/orgs","repos_url":"https://api.github.com/users/PatrickHeneise/repos","events_url":"https://api.github.com/users/PatrickHeneise/events{/privacy}","received_events_url":"https://api.github.com/users/PatrickHeneise/received_events","type":"User","site_admin":false},"private":false,"html_url":"https://github.com/PatrickHeneise/gitup-testing","description":"repo for testing webhooks only","fork":false,"url":"https://api.github.com/repos/PatrickHeneise/gitup-testing","forks_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/forks","keys_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/keys{/key_id}","collaborators_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/teams","hooks_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/hooks","issue_events_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/issues/events{/number}","events_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/events","assignees_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/assignees{/user}","branches_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/branches{/branch}","tags_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/tags","blobs_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/git/refs{/sha}","trees_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/git/trees{/sha}","statuses_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/statuses/{sha}","languages_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/languages","stargazers_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/stargazers","contributors_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/contributors","subscribers_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/subscribers","subscription_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/subscription","commits_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/commits{/sha}","git_commits_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/git/commits{/sha}","comments_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/comments{/number}","issue_comment_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/issues/comments/{number}","contents_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/contents/{+path}","compare_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/compare/{base}...{head}","merges_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/merges","archive_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/downloads","issues_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/issues{/number}","pulls_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/pulls{/number}","milestones_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/milestones{/number}","notifications_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/labels{/name}","releases_url":"https://api.github.com/repos/PatrickHeneise/gitup-testing/releases{/id}","created_at":"2015-01-17T13:07:23Z","updated_at":"2015-01-17T13:07:23Z","pushed_at":"2015-01-18T12:46:51Z","git_url":"git://github.com/PatrickHeneise/gitup-testing.git","ssh_url":"git@github.com:PatrickHeneise/gitup-testing.git","clone_url":"https://github.com/PatrickHeneise/gitup-testing.git","svn_url":"https://github.com/PatrickHeneise/gitup-testing","homepage":null,"size":0,"stargazers_count":0,"watchers_count":0,"language":null,"has_issues":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"forks_count":0,"mirror_url":null,"open_issues_count":3,"forks":0,"open_issues":3,"watchers":0,"default_branch":"master"},"sender":{"login":"PatrickHeneise","id":74390,"avatar_url":"https://avatars.githubusercontent.com/u/74390?v=3","gravatar_id":"","url":"https://api.github.com/users/PatrickHeneise","html_url":"https://github.com/PatrickHeneise","followers_url":"https://api.github.com/users/PatrickHeneise/followers","following_url":"https://api.github.com/users/PatrickHeneise/following{/other_user}","gists_url":"https://api.github.com/users/PatrickHeneise/gists{/gist_id}","starred_url":"https://api.github.com/users/PatrickHeneise/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PatrickHeneise/subscriptions","organizations_url":"https://api.github.com/users/PatrickHeneise/orgs","repos_url":"https://api.github.com/users/PatrickHeneise/repos","events_url":"https://api.github.com/users/PatrickHeneise/events{/privacy}","received_events_url":"https://api.github.com/users/PatrickHeneise/received_events","type":"User","site_admin":false}}' }
